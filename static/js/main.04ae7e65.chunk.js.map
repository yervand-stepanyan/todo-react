{"version":3,"sources":["components/FilteringOptions/FilteringOptions.js","components/Input/Input.js","helpers/localStorage.js","globals/constants.js","components/Todo/Todo.js","serviceWorker.js","index.js"],"names":["FILTER_STATES","FilteringOptions","filter","onFilter","leftItems","onClearCompleted","isCompleted","itemsLeft","className","onClick","Input","props","onInputChange","value","target","setState","todoValue","handleSubmit","state","replace","onTodoAdd","todoInput","focus","handleSubmitEnterKey","event","key","this","ref","node","placeholder","VARIABLES","onChange","onKeyDown","React","Component","loadState","stateName","serializedState","localStorage","getItem","JSON","parse","err","saveState","stringify","setItem","Error","removeState","removeItem","LOCAL_STORAGE","Todo","todos","id","currentId","title","isComplete","isEdit","isSelectAllClicked","onTodoSelect","activeId","map","todo","every","onSelectAll","onCheckboxChange","e","onTextClick","clickCount","singleClickTimer","setTimeout","clearTimeout","onTodoEdit","editInp","onItemInputChange","onItemKeyPress","isEnter","forEach","length","submitOnBlur","preventDefault","onRemove","getFilteredTodos","normalizedTodos","filterItemsLeft","checkbox","some","type","checked","htmlFor","onBlur","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04ae7e65.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./filteringOptions.css\";\r\n\r\nconst FILTER_STATES = {\r\n  all: \"all\",\r\n  active: \"active\",\r\n  completed: \"completed\"\r\n};\r\n\r\nexport default function FilteringOptions({filter, onFilter, leftItems, onClearCompleted, isCompleted}) {\r\n  const itemsLeft = `${leftItems} ${leftItems === 1 ? \"item left\" : \"items left\"}`;\r\n\r\n  return (\r\n    <div className=\"mainFilter\">\r\n      <div className=\"leftItems\">\r\n        <span>{itemsLeft}</span>\r\n      </div>\r\n      <div className=\"filterButtons\">\r\n        <button\r\n          className={`${filter === FILTER_STATES.all ? \"select\" : \"filterBtnOnHover\"} filterBtn`}\r\n          onClick={() => onFilter(FILTER_STATES.all)}\r\n        >\r\n          All\r\n        </button>\r\n        <button\r\n          className={`${filter === FILTER_STATES.active ? \"select\" : \"filterBtnOnHover\"} filterBtn`}\r\n          onClick={() => onFilter(FILTER_STATES.active)}\r\n        >\r\n          Active\r\n        </button>\r\n        <button\r\n          className={`${filter === FILTER_STATES.completed ? \"select\" : \"filterBtnOnHover\"} filterBtn`}\r\n          onClick={() => onFilter(FILTER_STATES.completed)}\r\n        >\r\n          Completed\r\n        </button>\r\n      </div>\r\n      <div className=\"clear\">\r\n        <span className={`${isCompleted ? \"showClearCompleted\" : \"hideClearCompleted\"} clearCompleted`}\r\n              onClick={onClearCompleted}>Clear completed</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./input.css\";\r\n\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      todoValue: \"\",\r\n    };\r\n  }\r\n\r\n  static VARIABLES = {\r\n    placeholder: \"What needs to be done?\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.todoInput.focus();\r\n  }\r\n\r\n  onInputChange = ({target: {value}}) => {\r\n    this.setState({\r\n      todoValue: value\r\n    });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    const valueFromInput = this.state.todoValue;\r\n    const firstReplace = valueFromInput.replace(/\\s\\s+/g, ' ');\r\n    const wsRegex = /^\\s*|\\s*$/g;\r\n    const value = firstReplace.replace(wsRegex, '');\r\n\r\n    if (value !== \"\") {\r\n      this.props.onTodoAdd(value);\r\n      this.setState({\r\n        todoValue: \"\"\r\n      });\r\n\r\n      this.todoInput.focus();\r\n    }\r\n  };\r\n\r\n  handleSubmitEnterKey = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      this.handleSubmit();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {todoValue} = this.state;\r\n\r\n    return (\r\n      <div className=\"inpDiv\">\r\n        <input\r\n          ref={node => this.todoInput = node}\r\n          className=\"input\"\r\n          placeholder={Input.VARIABLES.placeholder}\r\n          value={todoValue}\r\n          onChange={this.onInputChange}\r\n          onKeyDown={this.handleSubmitEnterKey}\r\n        />\r\n        <button className=\"btnAdd\" onClick={this.handleSubmit}>Add</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const loadState = stateName => {\r\n  try {\r\n    const serializedState = localStorage.getItem(stateName);\r\n\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (stateName, value) => {\r\n  try {\r\n    const serializedState = JSON.stringify(value);\r\n\r\n    localStorage.setItem(stateName, serializedState);\r\n  } catch (err) {\r\n    throw new Error(\"Can't save changes in local storage\");\r\n  }\r\n};\r\n\r\nexport const removeState = stateName => {\r\n  try {\r\n    localStorage.removeItem(stateName);\r\n  } catch (err) {\r\n    throw new Error(\"Can't remove item from local storage\");\r\n  }\r\n};","export const LOCAL_STORAGE = {\r\n  filter: 'filter',\r\n  isSelectAllClicked: 'isSelectAllClicked',\r\n  todos: 'todos'\r\n}","import React from \"react\";\r\n\r\nimport FilteringOptions from \"../FilteringOptions/FilteringOptions\";\r\nimport Input from \"../Input/Input\";\r\nimport {loadState, removeState, saveState} from \"../../helpers/localStorage\";\r\nimport {LOCAL_STORAGE} from \"../../globals/constants\";\r\nimport \"./todo.css\";\r\n\r\nconst FILTER_STATES = {\r\n  all: \"all\",\r\n  active: \"active\",\r\n  completed: \"completed\"\r\n};\r\n\r\nexport default class Todo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const todos = loadState(LOCAL_STORAGE.todos) || [];\r\n    const currentId = todos.length > 0 ? todos[todos.length - 1].id + 1 : 1;\r\n    const filter = loadState(LOCAL_STORAGE.filter) || FILTER_STATES.all;\r\n    const isSelectAllClicked = loadState(LOCAL_STORAGE.isSelectAllClicked) || false;\r\n\r\n    this.state = {\r\n      todos,\r\n      currentId,\r\n      filter,\r\n      isSelectAllClicked,\r\n      clickCount: 0,\r\n      checkbox: false,\r\n    };\r\n  }\r\n\r\n  onTodoAdd = todoValue => {\r\n    this.setState(state => ({\r\n        todos: [\r\n          ...state.todos,\r\n          {id: state.currentId, title: todoValue, isComplete: false, isEdit: false}\r\n        ],\r\n        currentId: state.currentId + 1,\r\n      }), () => {\r\n        saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n        saveState(LOCAL_STORAGE.isSelectAllClicked, this.state.isSelectAllClicked);\r\n        saveState(LOCAL_STORAGE.filter, this.state.filter);\r\n      }\r\n    );\r\n  };\r\n\r\n  onTodoSelect = activeId => {\r\n    this.setState(state => ({\r\n        todos: state.todos.map(todo =>\r\n          todo.id === activeId\r\n            ? {...todo, isComplete: !todo.isComplete, isEdit: false}\r\n            : todo\r\n        )\r\n      }), () => {\r\n        this.setState({\r\n            isSelectAllClicked: this.state.todos.every(todo => todo.isComplete)\r\n          },\r\n          () =>\r\n            saveState(LOCAL_STORAGE.isSelectAllClicked, this.state.isSelectAllClicked)\r\n        );\r\n\r\n        saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n      }\r\n    );\r\n  };\r\n\r\n  onSelectAll = () => {\r\n    this.setState({isSelectAllClicked: !this.state.isSelectAllClicked}, () =>\r\n      this.setState(state => ({\r\n        todos: state.todos.map(todo =>\r\n          ({...todo, isComplete: this.state.isSelectAllClicked, isEdit: false}))\r\n      }), () => {\r\n        saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n        saveState(LOCAL_STORAGE.isSelectAllClicked, this.state.isSelectAllClicked);\r\n      })\r\n    );\r\n  };\r\n\r\n  onCheckboxChange = (e, activeId) => {\r\n    this.onTodoSelect(activeId);\r\n  };\r\n\r\n  onTextClick = activeId => {\r\n    this.setState(state => ({\r\n      clickCount: state.clickCount + 1\r\n    }), () => {\r\n\r\n      if (this.state.clickCount === 1) {\r\n        this.singleClickTimer = setTimeout(() => {\r\n          this.setState({clickCount: 0});\r\n          this.onTodoSelect(activeId);\r\n        }, 400);\r\n      } else if (this.state.clickCount === 2) {\r\n        clearTimeout(this.singleClickTimer);\r\n        this.setState({clickCount: 0});\r\n        this.onTodoEdit(activeId);\r\n      }\r\n\r\n    });\r\n  };\r\n\r\n  onTodoEdit = activeId => {\r\n    this.setState(state => ({\r\n        todos: state.todos.map(todo =>\r\n          todo.id === activeId ? {...todo, isEdit: true} : todo\r\n        )\r\n      })\r\n    );\r\n\r\n    setTimeout(() => {\r\n      this.editInp.focus();\r\n    });\r\n  };\r\n\r\n  onItemInputChange = (id, event) => {\r\n    const {value} = event.target;\r\n\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo =>\r\n        todo.id === id ? {...todo, title: value} : todo\r\n      )\r\n    }));\r\n  };\r\n\r\n  onItemKeyPress = (id, e) => {\r\n    const isEnter = e.key === \"Enter\";\r\n\r\n    if (isEnter) {\r\n      this.state.todos.forEach(todo => {\r\n        if (todo.id === id) {\r\n          if (todo.title) {\r\n            const title = this.state.todos.filter(todo => todo.id === id)[0].title;\r\n            const firstReplace = title.replace(/\\s\\s+/g, ' ');\r\n            const wsRegex = /^\\s*|\\s*$/g;\r\n            const value = firstReplace.replace(wsRegex, '');\r\n\r\n            this.setState(state => ({\r\n                todos: state.todos.map(todo =>\r\n                  todo.id === id\r\n                    ? {...todo, title: value, isEdit: isEnter ? false : todo.isEdit}\r\n                    : todo\r\n                )\r\n              }), () => {\r\n                saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n\r\n                if (this.state.todos.length === 0) {\r\n                  this.setState({filter: FILTER_STATES.all, isSelectAllClicked: false});\r\n                  removeState(LOCAL_STORAGE.todos);\r\n                  removeState(LOCAL_STORAGE.filter);\r\n                  removeState(LOCAL_STORAGE.isSelectAllClicked);\r\n                }\r\n              }\r\n            );\r\n          } else {\r\n            this.setState(state => ({\r\n                todos: state.todos.filter(todo => todo.id !== id)\r\n              }), () => {\r\n                saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n\r\n                if (this.state.todos.length === 0) {\r\n                  this.setState({filter: FILTER_STATES.all, isSelectAllClicked: false});\r\n                  removeState(LOCAL_STORAGE.todos);\r\n                  removeState(LOCAL_STORAGE.filter);\r\n                  removeState(LOCAL_STORAGE.isSelectAllClicked);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  submitOnBlur = (id, e) => {\r\n    e.preventDefault();\r\n\r\n    this.state.todos.forEach(todo => {\r\n      if (todo.id === id) {\r\n        if (todo.title) {\r\n          const title = this.state.todos.filter(todo => todo.id === id)[0].title;\r\n          const firstReplace = title.replace(/\\s\\s+/g, ' ');\r\n          const wsRegex = /^\\s*|\\s*$/g;\r\n          const value = firstReplace.replace(wsRegex, '');\r\n\r\n          this.setState(state => ({\r\n              todos: state.todos.map(todo =>\r\n                todo.id === id\r\n                  ? {...todo, title: value, isEdit: false}\r\n                  : todo\r\n              )\r\n            }), () => {\r\n              saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n\r\n              if (this.state.todos.length === 0) {\r\n                this.setState({filter: FILTER_STATES.all, isSelectAllClicked: false});\r\n                removeState(LOCAL_STORAGE.todos);\r\n                removeState(LOCAL_STORAGE.filter);\r\n                removeState(LOCAL_STORAGE.isSelectAllClicked);\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          this.setState(state => ({\r\n              todos: state.todos.filter(todo => todo.id !== id)\r\n            }), () => {\r\n              saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n\r\n              if (this.state.todos.length === 0) {\r\n                this.setState({filter: FILTER_STATES.all, isSelectAllClicked: false});\r\n                removeState(LOCAL_STORAGE.todos);\r\n                removeState(LOCAL_STORAGE.filter);\r\n                removeState(LOCAL_STORAGE.isSelectAllClicked);\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  onRemove = activeId => {\r\n    this.setState(state => ({\r\n      todos: state.todos.filter(todo => todo.id !== activeId)\r\n    }), () => {\r\n      saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n\r\n      if (this.state.todos.length === 0) {\r\n        this.setState({filter: FILTER_STATES.all, isSelectAllClicked: false});\r\n        removeState(LOCAL_STORAGE.todos);\r\n        removeState(LOCAL_STORAGE.filter);\r\n        removeState(LOCAL_STORAGE.isSelectAllClicked);\r\n      }\r\n    });\r\n  };\r\n\r\n  onFilter = filter => {\r\n    this.setState({\r\n      filter\r\n    }, () => saveState(LOCAL_STORAGE.filter, this.state.filter));\r\n  };\r\n\r\n  getFilteredTodos = (todos, filter) => {\r\n    let normalizedTodos = todos;\r\n\r\n    if (filter === FILTER_STATES.completed) {\r\n      normalizedTodos = todos.filter(todo => todo.isComplete);\r\n    } else if (filter === FILTER_STATES.active) {\r\n      normalizedTodos = todos.filter(todo => !todo.isComplete);\r\n    }\r\n\r\n    return normalizedTodos;\r\n  };\r\n\r\n  filterItemsLeft = () => {\r\n    return this.state.todos.filter(todo => !todo.isComplete).length;\r\n  };\r\n\r\n  onClearCompleted = () => {\r\n    this.setState(state => ({\r\n      todos: state.todos.filter(todo => !todo.isComplete)\r\n    }), () => {\r\n      saveState(LOCAL_STORAGE.todos, this.state.todos);\r\n\r\n      if (this.state.todos.length === 0) {\r\n        this.setState({filter: FILTER_STATES.all, isSelectAllClicked: false});\r\n        removeState(LOCAL_STORAGE.todos);\r\n        removeState(LOCAL_STORAGE.filter);\r\n        removeState(LOCAL_STORAGE.isSelectAllClicked);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {todos, filter, isSelectAllClicked} = this.state;\r\n    const normalizedTodos = this.getFilteredTodos(todos, filter);\r\n    const isCompleted = todos.some(todo => todo.isComplete);\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"contentSection\">\r\n          <div className=\"title\">\r\n            <h1>Todo</h1>\r\n          </div>\r\n          <div className=\"inputSection\">\r\n            <div className=\"inputDiv\">\r\n              <div className={`${todos.length > 0 ? \"showSelectAll\" : \"hideSelectAll\"} \r\n              ${isSelectAllClicked ? \"selectAllClicked\" : \"\"}`}\r\n                   title=\"Mark all completed\" onClick={this.onSelectAll}>\r\n                <i className=\"down\" />\r\n              </div>\r\n              <Input onTodoAdd={this.onTodoAdd}/>\r\n            </div>\r\n            <div className={todos.length > 0 ? \"section\" : \"noDisplay\"}>\r\n              <section>\r\n                <ul>\r\n                  {normalizedTodos.map(({title, id, isComplete, isEdit}) => (\r\n                    <li key={id}>\r\n                      <div className=\"liContent\">\r\n                        <div className=\"checkBoxDiv\">\r\n                          <input type=\"checkbox\" id={`chbox${id}`}\r\n                                 onChange={e => this.onCheckboxChange(e, id)}\r\n                                 checked={isComplete}\r\n                                 className={!isEdit ? \"css-checkbox\" : \"checkBoxNone\"}/>\r\n                          <label htmlFor={`chbox${id}`} className=\"css-label\" />\r\n                        </div>\r\n                        {isEdit ? (\r\n                          <input\r\n                            ref={node => this.editInp = node}\r\n                            className=\"editInput\"\r\n                            value={title}\r\n                            onChange={e => this.onItemInputChange(id, e)}\r\n                            onKeyDown={e => this.onItemKeyPress(id, e)}\r\n                            onBlur={e => this.submitOnBlur(id, e)}\r\n                          />\r\n                        ) : (\r\n                          <span className={isComplete ? \"checked\" : \"unchecked\"}\r\n                                onClick={() => this.onTextClick(id)}>{title}</span>\r\n                        )}\r\n                        <button\r\n                          className={!isEdit ? \"removeItem\" : \"removeItemNone\"}\r\n                          onClick={() => this.onRemove(id)}\r\n                        >&times;</button>\r\n                      </div>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </section>\r\n            </div>\r\n            <div className={todos.length > 0 ? \"filters\" : \"noDisplay\"}>\r\n              <FilteringOptions\r\n                filter={filter}\r\n                onFilter={this.onFilter}\r\n                leftItems={this.filterItemsLeft()}\r\n                onClearCompleted={this.onClearCompleted}\r\n                isCompleted={isCompleted}/>\r\n            </div>\r\n\r\n          </div>\r\n          <div className={todos.length > 0 ? \"showFoldingEffect\" : \"hideFoldingEffect\"}>\r\n            <div className=\"footerDivLarge\" />\r\n            <div className=\"footerDivSmall\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Todo from \"./components/Todo/Todo\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Todo />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}